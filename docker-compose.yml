services:
  # PostgreSQL - 主数据库
  postgres:
    image: postgres:16-alpine
    container_name: knowton-postgres
    environment:
      POSTGRES_USER: knowton
      POSTGRES_PASSWORD: knowton_dev_password
      POSTGRES_DB: knowton
      POSTGRES_INITDB_ARGS: "-E UTF8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U knowton"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - knowton-network

  # Redis - 缓存和队列
  redis:
    image: redis:7-alpine
    container_name: knowton-redis
    command: redis-server --appendonly yes --requirepass knowton_redis_password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - knowton-network

  # MongoDB - 内容元数据
  mongodb:
    image: mongo:7
    container_name: knowton-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: knowton
      MONGO_INITDB_ROOT_PASSWORD: knowton_mongo_password
      MONGO_INITDB_DATABASE: knowton
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - knowton-network

  # Kafka - 消息队列
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: knowton-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - knowton-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: knowton-kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    ports:
      - "29092:29092"
      - "9092:9092"
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - knowton-network

  # ClickHouse - 分析数据库
  clickhouse:
    image: clickhouse/clickhouse-server:23.11-alpine
    container_name: knowton-clickhouse
    environment:
      CLICKHOUSE_DB: knowton
      CLICKHOUSE_USER: knowton
      CLICKHOUSE_PASSWORD: knowton_clickhouse_password
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./scripts/clickhouse-init.sql:/docker-entrypoint-initdb.d/init.sql
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    networks:
      - knowton-network

  # Elasticsearch - 全文搜索
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: knowton-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - knowton-network

  # IPFS Node (可选 - 用于本地测试)
  ipfs:
    image: ipfs/kubo:latest
    container_name: knowton-ipfs
    environment:
      - IPFS_PROFILE=server
    ports:
      - "4001:4001"
      - "5001:5001"
      - "8080:8080"
    volumes:
      - ipfs_data:/data/ipfs
    networks:
      - knowton-network

  # Adminer - 数据库管理工具
  adminer:
    image: adminer:latest
    container_name: knowton-adminer
    ports:
      - "8081:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
      - mongodb
    networks:
      - knowton-network

  # Redis Commander - Redis 管理工具
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: knowton-redis-commander
    environment:
      - REDIS_HOSTS=local:redis:6379:0:knowton_redis_password
    ports:
      - "8082:8081"
    depends_on:
      - redis
    networks:
      - knowton-network

volumes:
  postgres_data:
  redis_data:
  mongodb_data:
  mongodb_config:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:
  clickhouse_data:
  elasticsearch_data:
  ipfs_data:

networks:
  knowton-network:
    driver: bridge
