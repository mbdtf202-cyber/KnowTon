specVersion: 0.0.5
schema:
  file: ./schema.graphql
dataSources:
  - kind: ethereum
    name: CopyrightRegistry
    network: arbitrum-one
    source:
      address: "0x0000000000000000000000000000000000000000"
      abi: CopyrightRegistry
      startBlock: 0
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.7
      language: wasm/assemblyscript
      entities:
        - IPNFT
        - Creator
        - Transfer
      abis:
        - name: CopyrightRegistry
          file: ../packages/contracts/artifacts/contracts/CopyrightRegistry.sol/CopyrightRegistry.json
      eventHandlers:
        - event: IPNFTMinted(indexed uint256,indexed address,string,string,uint256)
          handler: handleIPNFTMinted
        - event: Transfer(indexed address,indexed address,indexed uint256)
          handler: handleTransfer
        - event: IPVerified(indexed uint256,bool)
          handler: handleIPVerified
      file: ./src/copyright-registry.ts
  
  - kind: ethereum
    name: RoyaltyDistributor
    network: arbitrum-one
    source:
      address: "0x0000000000000000000000000000000000000000"
      abi: RoyaltyDistributor
      startBlock: 0
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.7
      language: wasm/assemblyscript
      entities:
        - RoyaltyDistribution
        - Beneficiary
      abis:
        - name: RoyaltyDistributor
          file: ../packages/contracts/artifacts/contracts/RoyaltyDistributor.sol/RoyaltyDistributor.json
      eventHandlers:
        - event: RoyaltyDistributed(indexed uint256,uint256,address[],uint256[])
          handler: handleRoyaltyDistributed
        - event: BeneficiaryAdded(indexed uint256,address,uint256)
          handler: handleBeneficiaryAdded
      file: ./src/royalty-distributor.ts
  
  - kind: ethereum
    name: FractionalizationVault
    network: arbitrum-one
    source:
      address: "0x0000000000000000000000000000000000000000"
      abi: FractionalizationVault
      startBlock: 0
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.7
      language: wasm/assemblyscript
      entities:
        - Vault
        - VaultHolder
      abis:
        - name: FractionalizationVault
          file: ../packages/contracts/artifacts/contracts/FractionalizationVault.sol/FractionalizationVault.json
      eventHandlers:
        - event: VaultCreated(indexed uint256,address,uint256,uint256,string,string)
          handler: handleVaultCreated
        - event: Redeemed(indexed uint256,address)
          handler: handleRedeemed
      file: ./src/fractionalization-vault.ts
  
  - kind: ethereum
    name: MarketplaceAMM
    network: arbitrum-one
    source:
      address: "0x0000000000000000000000000000000000000000"
      abi: MarketplaceAMM
      startBlock: 0
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.7
      language: wasm/assemblyscript
      entities:
        - Trade
        - Pool
      abis:
        - name: MarketplaceAMM
          file: ../packages/contracts/artifacts/contracts/MarketplaceAMM.sol/MarketplaceAMM.json
      eventHandlers:
        - event: TradeExecuted(indexed address,indexed address,uint256,uint256,uint256)
          handler: handleTradeExecuted
        - event: PoolCreated(indexed address,indexed address,uint256)
          handler: handlePoolCreated
      file: ./src/marketplace-amm.ts
  
  - kind: ethereum
    name: StakingRewards
    network: arbitrum-one
    source:
      address: "0x0000000000000000000000000000000000000000"
      abi: StakingRewards
      startBlock: 0
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.7
      language: wasm/assemblyscript
      entities:
        - Stake
        - Reward
      abis:
        - name: StakingRewards
          file: ../packages/contracts/artifacts/contracts/StakingRewards.sol/StakingRewards.json
      eventHandlers:
        - event: Staked(indexed address,uint256,uint256,uint256)
          handler: handleStaked
        - event: Unstaked(indexed address,uint256)
          handler: handleUnstaked
        - event: RewardClaimed(indexed address,uint256)
          handler: handleRewardClaimed
      file: ./src/staking-rewards.ts
  
  - kind: ethereum
    name: DAOGovernance
    network: arbitrum-one
    source:
      address: "0x0000000000000000000000000000000000000000"
      abi: DAOGovernance
      startBlock: 0
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.7
      language: wasm/assemblyscript
      entities:
        - Proposal
        - Vote
      abis:
        - name: DAOGovernance
          file: ../packages/contracts/artifacts/contracts/DAOGovernance.sol/DAOGovernance.json
      eventHandlers:
        - event: ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string)
          handler: handleProposalCreated
        - event: VoteCast(indexed address,uint256,uint8,uint256,string)
          handler: handleVoteCast
        - event: ProposalExecuted(uint256)
          handler: handleProposalExecuted
      file: ./src/dao-governance.ts
  
  - kind: ethereum
    name: IPBond
    network: arbitrum-one
    source:
      address: "0x0000000000000000000000000000000000000000"
      abi: IPBond
      startBlock: 0
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.7
      language: wasm/assemblyscript
      entities:
        - Bond
        - Investment
      abis:
        - name: IPBond
          file: ../packages/contracts/artifacts/contracts/IPBond.sol/IPBond.json
      eventHandlers:
        - event: BondIssued(indexed uint256,address,uint256,uint256,uint256)
          handler: handleBondIssued
        - event: Invested(indexed uint256,indexed address,uint8,uint256)
          handler: handleInvested
        - event: Redeemed(indexed uint256,indexed address,uint8,uint256)
          handler: handleRedeemed
      file: ./src/ipbond.ts
