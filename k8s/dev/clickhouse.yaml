apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: clickhouse
  namespace: knowton-dev
spec:
  serviceName: clickhouse-service
  replicas: 1
  selector:
    matchLabels:
      app: clickhouse
  template:
    metadata:
      labels:
        app: clickhouse
    spec:
      containers:
      - name: clickhouse
        image: clickhouse/clickhouse-server:latest
        ports:
        - containerPort: 8123
          name: http
        - containerPort: 9000
          name: native
        env:
        - name: CLICKHOUSE_DB
          value: "knowton"
        - name: CLICKHOUSE_USER
          value: "default"
        - name: CLICKHOUSE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: clickhouse-secret
              key: password
        resources:
          requests:
            memory: "1Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        volumeMounts:
        - name: clickhouse-data
          mountPath: /var/lib/clickhouse
        - name: clickhouse-init
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: clickhouse-init
        configMap:
          name: clickhouse-init-script
  volumeClaimTemplates:
  - metadata:
      name: clickhouse-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 100Gi
---
apiVersion: v1
kind: Service
metadata:
  name: clickhouse-service
  namespace: knowton-dev
spec:
  selector:
    app: clickhouse
  ports:
  - protocol: TCP
    port: 8123
    targetPort: 8123
    name: http
  - protocol: TCP
    port: 9000
    targetPort: 9000
    name: native
  clusterIP: None
---
apiVersion: v1
kind: Secret
metadata:
  name: clickhouse-secret
  namespace: knowton-dev
type: Opaque
stringData:
  password: "changeme"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: clickhouse-init-script
  namespace: knowton-dev
data:
  init.sql: |
    -- ============================================================================
    -- KnowTon Platform - ClickHouse Analytics Database Initialization
    -- ============================================================================
    -- This is a simplified version for K8s ConfigMap
    -- For full schema, see scripts/clickhouse-init.sql
    -- ============================================================================
    
    CREATE DATABASE IF NOT EXISTS knowton
    ENGINE = Atomic
    COMMENT 'KnowTon Web3 IP Platform Analytics Database';
    
    USE knowton;
    
    -- Core transaction table
    CREATE TABLE IF NOT EXISTS nft_transactions (
        event_date Date DEFAULT toDate(event_time),
        event_time DateTime64(3) DEFAULT now64(),
        tx_hash String,
        block_number UInt64,
        block_timestamp DateTime,
        token_id UInt256,
        contract_address String,
        from_address String,
        to_address String,
        transaction_type Enum8('mint' = 1, 'transfer' = 2, 'sale' = 3, 'burn' = 4, 'list' = 5, 'delist' = 6),
        price Decimal(78, 18) DEFAULT 0,
        currency String DEFAULT 'ETH',
        price_usd Decimal(78, 6),
        gas_used UInt64,
        category String DEFAULT '',
        creator_address String DEFAULT '',
        INDEX idx_token_id token_id TYPE minmax GRANULARITY 4,
        INDEX idx_from_address from_address TYPE bloom_filter GRANULARITY 4,
        INDEX idx_to_address to_address TYPE bloom_filter GRANULARITY 4
    ) ENGINE = MergeTree()
    PARTITION BY toYYYYMM(event_date)
    ORDER BY (event_date, event_time, token_id, tx_hash)
    TTL event_date + INTERVAL 3 YEAR DELETE;
    
    -- Revenue breakdown table
    CREATE TABLE IF NOT EXISTS revenue_breakdown (
        event_date Date DEFAULT toDate(event_time),
        event_time DateTime64(3) DEFAULT now64(),
        tx_hash String,
        token_id UInt256,
        revenue_source Enum8('primary_sale' = 1, 'secondary_sale' = 2, 'royalty' = 3, 
                             'fractionalization' = 4, 'staking_reward' = 5, 'lending_interest' = 6, 
                             'bond_yield' = 7, 'platform_fee' = 8),
        recipient_address String,
        gross_amount Decimal(78, 18),
        net_amount Decimal(78, 18),
        usd_value Decimal(78, 6),
        INDEX idx_recipient recipient_address TYPE bloom_filter GRANULARITY 4
    ) ENGINE = MergeTree()
    PARTITION BY toYYYYMM(event_date)
    ORDER BY (event_date, event_time, revenue_source, token_id)
    TTL event_date + INTERVAL 5 YEAR DELETE;
    
    -- User behavior events
    CREATE TABLE IF NOT EXISTS user_behavior_events (
        event_date Date DEFAULT toDate(event_time),
        event_time DateTime64(3) DEFAULT now64(),
        session_id String,
        user_address String,
        event_type Enum16('page_view' = 1, 'nft_view' = 2, 'nft_like' = 3, 'nft_share' = 4,
                         'search' = 5, 'purchase_complete' = 12, 'bid_placed' = 13),
        target_id String DEFAULT '',
        INDEX idx_user user_address TYPE bloom_filter GRANULARITY 4
    ) ENGINE = MergeTree()
    PARTITION BY toYYYYMM(event_date)
    ORDER BY (event_date, event_time, user_address, session_id)
    TTL event_date + INTERVAL 1 YEAR DELETE;
    
    -- Content metrics
    CREATE TABLE IF NOT EXISTS content_metrics (
        date Date,
        content_id String,
        token_id UInt256,
        views UInt64,
        likes UInt64,
        revenue Decimal(78, 18)
    ) ENGINE = SummingMergeTree()
    PARTITION BY toYYYYMM(date)
    ORDER BY (date, content_id);
    
    -- Note: For complete schema with all tables and materialized views,
    -- run scripts/clickhouse-init.sql after deployment
