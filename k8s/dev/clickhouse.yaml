apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: clickhouse
  namespace: knowton-dev
spec:
  serviceName: clickhouse-service
  replicas: 1
  selector:
    matchLabels:
      app: clickhouse
  template:
    metadata:
      labels:
        app: clickhouse
    spec:
      containers:
      - name: clickhouse
        image: clickhouse/clickhouse-server:latest
        ports:
        - containerPort: 8123
          name: http
        - containerPort: 9000
          name: native
        env:
        - name: CLICKHOUSE_DB
          value: "knowton"
        - name: CLICKHOUSE_USER
          value: "default"
        - name: CLICKHOUSE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: clickhouse-secret
              key: password
        resources:
          requests:
            memory: "1Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        volumeMounts:
        - name: clickhouse-data
          mountPath: /var/lib/clickhouse
        - name: clickhouse-init
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: clickhouse-init
        configMap:
          name: clickhouse-init-script
  volumeClaimTemplates:
  - metadata:
      name: clickhouse-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 100Gi
---
apiVersion: v1
kind: Service
metadata:
  name: clickhouse-service
  namespace: knowton-dev
spec:
  selector:
    app: clickhouse
  ports:
  - protocol: TCP
    port: 8123
    targetPort: 8123
    name: http
  - protocol: TCP
    port: 9000
    targetPort: 9000
    name: native
  clusterIP: None
---
apiVersion: v1
kind: Secret
metadata:
  name: clickhouse-secret
  namespace: knowton-dev
type: Opaque
stringData:
  password: "changeme"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: clickhouse-init-script
  namespace: knowton-dev
data:
  init.sql: |
    CREATE DATABASE IF NOT EXISTS knowton;
    USE knowton;
    CREATE TABLE IF NOT EXISTS nft_transactions (
        event_date Date,
        event_time DateTime,
        tx_hash String,
        token_id UInt256,
        from_address String,
        to_address String,
        price Decimal(78, 18)
    ) ENGINE = MergeTree()
    PARTITION BY toYYYYMM(event_date)
    ORDER BY (event_date, event_time, token_id);
