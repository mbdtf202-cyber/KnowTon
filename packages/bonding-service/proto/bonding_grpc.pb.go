// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

const _ = grpc.SupportPackageIsVersion7

type BondingServiceClient interface {
	IssueBond(ctx context.Context, in *IssueBondRequest, opts ...grpc.CallOption) (*IssueBondResponse, error)
}

type bondingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBondingServiceClient(cc grpc.ClientConnInterface) BondingServiceClient {
	return &bondingServiceClient{cc}
}

func (c *bondingServiceClient) IssueBond(ctx context.Context, in *IssueBondRequest, opts ...grpc.CallOption) (*IssueBondResponse, error) {
	out := new(IssueBondResponse)
	err := c.cc.Invoke(ctx, "/bonding.BondingService/IssueBond", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type BondingServiceServer interface {
	IssueBond(context.Context, *IssueBondRequest) (*IssueBondResponse, error)
	mustEmbedUnimplementedBondingServiceServer()
}

type UnimplementedBondingServiceServer struct {
}

func (UnimplementedBondingServiceServer) IssueBond(context.Context, *IssueBondRequest) (*IssueBondResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueBond not implemented")
}
func (UnimplementedBondingServiceServer) mustEmbedUnimplementedBondingServiceServer() {}

type UnsafeBondingServiceServer interface {
	mustEmbedUnimplementedBondingServiceServer()
}

func RegisterBondingServiceServer(s grpc.ServiceRegistrar, srv BondingServiceServer) {
	s.RegisterService(&BondingService_ServiceDesc, srv)
}

func _BondingService_IssueBond_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueBondRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BondingServiceServer).IssueBond(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bonding.BondingService/IssueBond",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BondingServiceServer).IssueBond(ctx, req.(*IssueBondRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var BondingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bonding.BondingService",
	HandlerType: (*BondingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IssueBond",
			Handler:    _BondingService_IssueBond_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bonding.proto",
}
