name: Purge CDN Cache

on:
  workflow_dispatch:
    inputs:
      purge_type:
        description: 'Type of cache purge'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - static
          - api
          - specific
      specific_files:
        description: 'Specific files to purge (comma-separated URLs)'
        required: false
        type: string
  
  # Automatically purge cache after successful deployment
  workflow_run:
    workflows: ["Deploy to Production"]
    types:
      - completed

jobs:
  purge-cache:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine purge type
        id: purge-type
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "type=${{ inputs.purge_type }}" >> $GITHUB_OUTPUT
          else
            echo "type=all" >> $GITHUB_OUTPUT
          fi

      - name: Purge All Cache
        if: steps.purge-type.outputs.type == 'all'
        run: |
          echo "Purging all cache..."
          response=$(curl -s -X POST \
            "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"purge_everything":true}')
          
          echo "Response: $response"
          
          if echo "$response" | jq -e '.success == true' > /dev/null; then
            echo "✅ Cache purged successfully"
          else
            echo "❌ Cache purge failed"
            exit 1
          fi

      - name: Purge Static Assets
        if: steps.purge-type.outputs.type == 'static'
        run: |
          echo "Purging static assets cache..."
          response=$(curl -s -X POST \
            "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "files": [
                "https://knowton.io/assets/*",
                "https://knowton.io/*.js",
                "https://knowton.io/*.css"
              ]
            }')
          
          echo "Response: $response"

      - name: Purge API Cache
        if: steps.purge-type.outputs.type == 'api'
        run: |
          echo "Purging API cache..."
          response=$(curl -s -X POST \
            "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"tags":["api"]}')
          
          echo "Response: $response"

      - name: Purge Specific Files
        if: steps.purge-type.outputs.type == 'specific' && inputs.specific_files != ''
        run: |
          echo "Purging specific files..."
          
          # Convert comma-separated list to JSON array
          files=$(echo "${{ inputs.specific_files }}" | jq -R -s -c 'split(",") | map(gsub("^\\s+|\\s+$";""))')
          
          response=$(curl -s -X POST \
            "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"files\":$files}")
          
          echo "Response: $response"

      - name: Warm Up Cache
        if: steps.purge-type.outputs.type == 'all'
        run: |
          echo "Warming up cache for critical pages..."
          
          # List of critical pages to warm up
          pages=(
            "https://knowton.io/"
            "https://knowton.io/marketplace"
            "https://knowton.io/mint"
            "https://knowton.io/api/v1/nft/trending"
            "https://knowton.io/api/v1/marketplace/stats"
          )
          
          for page in "${pages[@]}"; do
            echo "Warming up: $page"
            curl -s -o /dev/null "$page"
            sleep 1
          done
          
          echo "✅ Cache warmed up"

      - name: Verify Cache Status
        run: |
          echo "Verifying cache status..."
          
          # Check if static assets are being cached
          response=$(curl -s -I "https://knowton.io/assets/index.js")
          
          if echo "$response" | grep -qi "cf-cache-status"; then
            echo "✅ CDN is working"
          else
            echo "⚠️ CDN may not be configured correctly"
          fi

      - name: Notify Slack
        if: always()
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "CDN Cache Purge ${{ job.status }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*CDN Cache Purge*\n*Status:* ${{ job.status }}\n*Type:* ${{ steps.purge-type.outputs.type }}\n*Triggered by:* ${{ github.actor }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        continue-on-error: true

      - name: Create Summary
        if: always()
        run: |
          echo "## CDN Cache Purge Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Purge Type:** ${{ steps.purge-type.outputs.type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Verify cache is working: \`curl -I https://knowton.io/assets/index.js\`" >> $GITHUB_STEP_SUMMARY
          echo "2. Check cache hit rate in Cloudflare Analytics" >> $GITHUB_STEP_SUMMARY
          echo "3. Monitor performance metrics in Grafana" >> $GITHUB_STEP_SUMMARY
